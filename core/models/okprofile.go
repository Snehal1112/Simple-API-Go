// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Okprofile is an object representing the database table.
type Okprofile struct {
	IDProfile     int       `boil:"id_profile" json:"id_profile" toml:"id_profile" yaml:"id_profile"`
	AkunID        int       `boil:"akun_id" json:"akun_id" toml:"akun_id" yaml:"akun_id"`
	FirstName     string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName      string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Photo         string    `boil:"photo" json:"photo" toml:"photo" yaml:"photo"`
	CurrentStatus string    `boil:"current_status" json:"current_status" toml:"current_status" yaml:"current_status"`
	CreatedAt     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *okprofileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L okprofileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// okprofileR is where relationships are stored.
type okprofileR struct {
	Akun                     *Okakun
	AssignedtoOkprojecttasks OkprojecttaskSlice
	AssignerOkprojecttasks   OkprojecttaskSlice
}

// okprofileL is where Load methods for each relationship are stored.
type okprofileL struct{}

var (
	okprofileColumns               = []string{"id_profile", "akun_id", "first_name", "last_name", "photo", "current_status", "created_at", "updated_at"}
	okprofileColumnsWithoutDefault = []string{"akun_id", "first_name", "last_name", "photo", "current_status", "created_at", "updated_at"}
	okprofileColumnsWithDefault    = []string{"id_profile"}
	okprofilePrimaryKeyColumns     = []string{"id_profile"}
)

type (
	// OkprofileSlice is an alias for a slice of pointers to Okprofile.
	// This should generally be used opposed to []Okprofile.
	OkprofileSlice []*Okprofile
	// OkprofileHook is the signature for custom Okprofile hook methods
	OkprofileHook func(boil.Executor, *Okprofile) error

	okprofileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	okprofileType                 = reflect.TypeOf(&Okprofile{})
	okprofileMapping              = queries.MakeStructMapping(okprofileType)
	okprofilePrimaryKeyMapping, _ = queries.BindMapping(okprofileType, okprofileMapping, okprofilePrimaryKeyColumns)
	okprofileInsertCacheMut       sync.RWMutex
	okprofileInsertCache          = make(map[string]insertCache)
	okprofileUpdateCacheMut       sync.RWMutex
	okprofileUpdateCache          = make(map[string]updateCache)
	okprofileUpsertCacheMut       sync.RWMutex
	okprofileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var okprofileBeforeInsertHooks []OkprofileHook
var okprofileBeforeUpdateHooks []OkprofileHook
var okprofileBeforeDeleteHooks []OkprofileHook
var okprofileBeforeUpsertHooks []OkprofileHook

var okprofileAfterInsertHooks []OkprofileHook
var okprofileAfterSelectHooks []OkprofileHook
var okprofileAfterUpdateHooks []OkprofileHook
var okprofileAfterDeleteHooks []OkprofileHook
var okprofileAfterUpsertHooks []OkprofileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Okprofile) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range okprofileBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Okprofile) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range okprofileBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Okprofile) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range okprofileBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Okprofile) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range okprofileBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Okprofile) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range okprofileAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Okprofile) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range okprofileAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Okprofile) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range okprofileAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Okprofile) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range okprofileAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Okprofile) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range okprofileAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOkprofileHook registers your hook function for all future operations.
func AddOkprofileHook(hookPoint boil.HookPoint, okprofileHook OkprofileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		okprofileBeforeInsertHooks = append(okprofileBeforeInsertHooks, okprofileHook)
	case boil.BeforeUpdateHook:
		okprofileBeforeUpdateHooks = append(okprofileBeforeUpdateHooks, okprofileHook)
	case boil.BeforeDeleteHook:
		okprofileBeforeDeleteHooks = append(okprofileBeforeDeleteHooks, okprofileHook)
	case boil.BeforeUpsertHook:
		okprofileBeforeUpsertHooks = append(okprofileBeforeUpsertHooks, okprofileHook)
	case boil.AfterInsertHook:
		okprofileAfterInsertHooks = append(okprofileAfterInsertHooks, okprofileHook)
	case boil.AfterSelectHook:
		okprofileAfterSelectHooks = append(okprofileAfterSelectHooks, okprofileHook)
	case boil.AfterUpdateHook:
		okprofileAfterUpdateHooks = append(okprofileAfterUpdateHooks, okprofileHook)
	case boil.AfterDeleteHook:
		okprofileAfterDeleteHooks = append(okprofileAfterDeleteHooks, okprofileHook)
	case boil.AfterUpsertHook:
		okprofileAfterUpsertHooks = append(okprofileAfterUpsertHooks, okprofileHook)
	}
}

// OneP returns a single okprofile record from the query, and panics on error.
func (q okprofileQuery) OneP() *Okprofile {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single okprofile record from the query.
func (q okprofileQuery) One() (*Okprofile, error) {
	o := &Okprofile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for okprofile")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Okprofile records from the query, and panics on error.
func (q okprofileQuery) AllP() OkprofileSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Okprofile records from the query.
func (q okprofileQuery) All() (OkprofileSlice, error) {
	var o OkprofileSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Okprofile slice")
	}

	if len(okprofileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Okprofile records in the query, and panics on error.
func (q okprofileQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Okprofile records in the query.
func (q okprofileQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count okprofile rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q okprofileQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q okprofileQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if okprofile exists")
	}

	return count > 0, nil
}

// AkunG pointed to by the foreign key.
func (o *Okprofile) AkunG(mods ...qm.QueryMod) okakunQuery {
	return o.Akun(boil.GetDB(), mods...)
}

// Akun pointed to by the foreign key.
func (o *Okprofile) Akun(exec boil.Executor, mods ...qm.QueryMod) okakunQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id_akun=?", o.AkunID),
	}

	queryMods = append(queryMods, mods...)

	query := Okakuns(exec, queryMods...)
	queries.SetFrom(query.Query, "`okakun`")

	return query
}

// AssignedtoOkprojecttasksG retrieves all the okprojecttask's okprojecttask via assignedto_id column.
func (o *Okprofile) AssignedtoOkprojecttasksG(mods ...qm.QueryMod) okprojecttaskQuery {
	return o.AssignedtoOkprojecttasks(boil.GetDB(), mods...)
}

// AssignedtoOkprojecttasks retrieves all the okprojecttask's okprojecttask with an executor via assignedto_id column.
func (o *Okprofile) AssignedtoOkprojecttasks(exec boil.Executor, mods ...qm.QueryMod) okprojecttaskQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`assignedto_id`=?", o.IDProfile),
	)

	query := Okprojecttasks(exec, queryMods...)
	queries.SetFrom(query.Query, "`okprojecttask` as `a`")
	return query
}

// AssignerOkprojecttasksG retrieves all the okprojecttask's okprojecttask via assigner_id column.
func (o *Okprofile) AssignerOkprojecttasksG(mods ...qm.QueryMod) okprojecttaskQuery {
	return o.AssignerOkprojecttasks(boil.GetDB(), mods...)
}

// AssignerOkprojecttasks retrieves all the okprojecttask's okprojecttask with an executor via assigner_id column.
func (o *Okprofile) AssignerOkprojecttasks(exec boil.Executor, mods ...qm.QueryMod) okprojecttaskQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`assigner_id`=?", o.IDProfile),
	)

	query := Okprojecttasks(exec, queryMods...)
	queries.SetFrom(query.Query, "`okprojecttask` as `a`")
	return query
}

// LoadAkun allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (okprofileL) LoadAkun(e boil.Executor, singular bool, maybeOkprofile interface{}) error {
	var slice []*Okprofile
	var object *Okprofile

	count := 1
	if singular {
		object = maybeOkprofile.(*Okprofile)
	} else {
		slice = *maybeOkprofile.(*OkprofileSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &okprofileR{}
		}
		args[0] = object.AkunID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &okprofileR{}
			}
			args[i] = obj.AkunID
		}
	}

	query := fmt.Sprintf(
		"select * from `okakun` where `id_akun` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Okakun")
	}
	defer results.Close()

	var resultSlice []*Okakun
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Okakun")
	}

	if len(okprofileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Akun = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AkunID == foreign.IDAkun {
				local.R.Akun = foreign
				break
			}
		}
	}

	return nil
}

// LoadAssignedtoOkprojecttasks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (okprofileL) LoadAssignedtoOkprojecttasks(e boil.Executor, singular bool, maybeOkprofile interface{}) error {
	var slice []*Okprofile
	var object *Okprofile

	count := 1
	if singular {
		object = maybeOkprofile.(*Okprofile)
	} else {
		slice = *maybeOkprofile.(*OkprofileSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &okprofileR{}
		}
		args[0] = object.IDProfile
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &okprofileR{}
			}
			args[i] = obj.IDProfile
		}
	}

	query := fmt.Sprintf(
		"select * from `okprojecttask` where `assignedto_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load okprojecttask")
	}
	defer results.Close()

	var resultSlice []*Okprojecttask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice okprojecttask")
	}

	if len(okprojecttaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignedtoOkprojecttasks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.IDProfile == foreign.AssignedtoID {
				local.R.AssignedtoOkprojecttasks = append(local.R.AssignedtoOkprojecttasks, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAssignerOkprojecttasks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (okprofileL) LoadAssignerOkprojecttasks(e boil.Executor, singular bool, maybeOkprofile interface{}) error {
	var slice []*Okprofile
	var object *Okprofile

	count := 1
	if singular {
		object = maybeOkprofile.(*Okprofile)
	} else {
		slice = *maybeOkprofile.(*OkprofileSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &okprofileR{}
		}
		args[0] = object.IDProfile
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &okprofileR{}
			}
			args[i] = obj.IDProfile
		}
	}

	query := fmt.Sprintf(
		"select * from `okprojecttask` where `assigner_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load okprojecttask")
	}
	defer results.Close()

	var resultSlice []*Okprojecttask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice okprojecttask")
	}

	if len(okprojecttaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignerOkprojecttasks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.IDProfile == foreign.AssignerID {
				local.R.AssignerOkprojecttasks = append(local.R.AssignerOkprojecttasks, foreign)
				break
			}
		}
	}

	return nil
}

// SetAkunG of the okprofile to the related item.
// Sets o.R.Akun to related.
// Adds o to related.R.AkunOkprofiles.
// Uses the global database handle.
func (o *Okprofile) SetAkunG(insert bool, related *Okakun) error {
	return o.SetAkun(boil.GetDB(), insert, related)
}

// SetAkunP of the okprofile to the related item.
// Sets o.R.Akun to related.
// Adds o to related.R.AkunOkprofiles.
// Panics on error.
func (o *Okprofile) SetAkunP(exec boil.Executor, insert bool, related *Okakun) {
	if err := o.SetAkun(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAkunGP of the okprofile to the related item.
// Sets o.R.Akun to related.
// Adds o to related.R.AkunOkprofiles.
// Uses the global database handle and panics on error.
func (o *Okprofile) SetAkunGP(insert bool, related *Okakun) {
	if err := o.SetAkun(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAkun of the okprofile to the related item.
// Sets o.R.Akun to related.
// Adds o to related.R.AkunOkprofiles.
func (o *Okprofile) SetAkun(exec boil.Executor, insert bool, related *Okakun) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `okprofile` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"akun_id"}),
		strmangle.WhereClause("`", "`", 0, okprofilePrimaryKeyColumns),
	)
	values := []interface{}{related.IDAkun, o.IDProfile}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AkunID = related.IDAkun

	if o.R == nil {
		o.R = &okprofileR{
			Akun: related,
		}
	} else {
		o.R.Akun = related
	}

	if related.R == nil {
		related.R = &okakunR{
			AkunOkprofiles: OkprofileSlice{o},
		}
	} else {
		related.R.AkunOkprofiles = append(related.R.AkunOkprofiles, o)
	}

	return nil
}

// AddAssignedtoOkprojecttasksG adds the given related objects to the existing relationships
// of the okprofile, optionally inserting them as new records.
// Appends related to o.R.AssignedtoOkprojecttasks.
// Sets related.R.Assignedto appropriately.
// Uses the global database handle.
func (o *Okprofile) AddAssignedtoOkprojecttasksG(insert bool, related ...*Okprojecttask) error {
	return o.AddAssignedtoOkprojecttasks(boil.GetDB(), insert, related...)
}

// AddAssignedtoOkprojecttasksP adds the given related objects to the existing relationships
// of the okprofile, optionally inserting them as new records.
// Appends related to o.R.AssignedtoOkprojecttasks.
// Sets related.R.Assignedto appropriately.
// Panics on error.
func (o *Okprofile) AddAssignedtoOkprojecttasksP(exec boil.Executor, insert bool, related ...*Okprojecttask) {
	if err := o.AddAssignedtoOkprojecttasks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssignedtoOkprojecttasksGP adds the given related objects to the existing relationships
// of the okprofile, optionally inserting them as new records.
// Appends related to o.R.AssignedtoOkprojecttasks.
// Sets related.R.Assignedto appropriately.
// Uses the global database handle and panics on error.
func (o *Okprofile) AddAssignedtoOkprojecttasksGP(insert bool, related ...*Okprojecttask) {
	if err := o.AddAssignedtoOkprojecttasks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssignedtoOkprojecttasks adds the given related objects to the existing relationships
// of the okprofile, optionally inserting them as new records.
// Appends related to o.R.AssignedtoOkprojecttasks.
// Sets related.R.Assignedto appropriately.
func (o *Okprofile) AddAssignedtoOkprojecttasks(exec boil.Executor, insert bool, related ...*Okprojecttask) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssignedtoID = o.IDProfile
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `okprojecttask` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"assignedto_id"}),
				strmangle.WhereClause("`", "`", 0, okprojecttaskPrimaryKeyColumns),
			)
			values := []interface{}{o.IDProfile, rel.IDPTask}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssignedtoID = o.IDProfile
		}
	}

	if o.R == nil {
		o.R = &okprofileR{
			AssignedtoOkprojecttasks: related,
		}
	} else {
		o.R.AssignedtoOkprojecttasks = append(o.R.AssignedtoOkprojecttasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &okprojecttaskR{
				Assignedto: o,
			}
		} else {
			rel.R.Assignedto = o
		}
	}
	return nil
}

// AddAssignerOkprojecttasksG adds the given related objects to the existing relationships
// of the okprofile, optionally inserting them as new records.
// Appends related to o.R.AssignerOkprojecttasks.
// Sets related.R.Assigner appropriately.
// Uses the global database handle.
func (o *Okprofile) AddAssignerOkprojecttasksG(insert bool, related ...*Okprojecttask) error {
	return o.AddAssignerOkprojecttasks(boil.GetDB(), insert, related...)
}

// AddAssignerOkprojecttasksP adds the given related objects to the existing relationships
// of the okprofile, optionally inserting them as new records.
// Appends related to o.R.AssignerOkprojecttasks.
// Sets related.R.Assigner appropriately.
// Panics on error.
func (o *Okprofile) AddAssignerOkprojecttasksP(exec boil.Executor, insert bool, related ...*Okprojecttask) {
	if err := o.AddAssignerOkprojecttasks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssignerOkprojecttasksGP adds the given related objects to the existing relationships
// of the okprofile, optionally inserting them as new records.
// Appends related to o.R.AssignerOkprojecttasks.
// Sets related.R.Assigner appropriately.
// Uses the global database handle and panics on error.
func (o *Okprofile) AddAssignerOkprojecttasksGP(insert bool, related ...*Okprojecttask) {
	if err := o.AddAssignerOkprojecttasks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssignerOkprojecttasks adds the given related objects to the existing relationships
// of the okprofile, optionally inserting them as new records.
// Appends related to o.R.AssignerOkprojecttasks.
// Sets related.R.Assigner appropriately.
func (o *Okprofile) AddAssignerOkprojecttasks(exec boil.Executor, insert bool, related ...*Okprojecttask) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssignerID = o.IDProfile
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `okprojecttask` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"assigner_id"}),
				strmangle.WhereClause("`", "`", 0, okprojecttaskPrimaryKeyColumns),
			)
			values := []interface{}{o.IDProfile, rel.IDPTask}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssignerID = o.IDProfile
		}
	}

	if o.R == nil {
		o.R = &okprofileR{
			AssignerOkprojecttasks: related,
		}
	} else {
		o.R.AssignerOkprojecttasks = append(o.R.AssignerOkprojecttasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &okprojecttaskR{
				Assigner: o,
			}
		} else {
			rel.R.Assigner = o
		}
	}
	return nil
}

// OkprofilesG retrieves all records.
func OkprofilesG(mods ...qm.QueryMod) okprofileQuery {
	return Okprofiles(boil.GetDB(), mods...)
}

// Okprofiles retrieves all the records using an executor.
func Okprofiles(exec boil.Executor, mods ...qm.QueryMod) okprofileQuery {
	mods = append(mods, qm.From("`okprofile`"))
	return okprofileQuery{NewQuery(exec, mods...)}
}

// FindOkprofileG retrieves a single record by ID.
func FindOkprofileG(idProfile int, selectCols ...string) (*Okprofile, error) {
	return FindOkprofile(boil.GetDB(), idProfile, selectCols...)
}

// FindOkprofileGP retrieves a single record by ID, and panics on error.
func FindOkprofileGP(idProfile int, selectCols ...string) *Okprofile {
	retobj, err := FindOkprofile(boil.GetDB(), idProfile, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindOkprofile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOkprofile(exec boil.Executor, idProfile int, selectCols ...string) (*Okprofile, error) {
	okprofileObj := &Okprofile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `okprofile` where `id_profile`=?", sel,
	)

	q := queries.Raw(exec, query, idProfile)

	err := q.Bind(okprofileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from okprofile")
	}

	return okprofileObj, nil
}

// FindOkprofileP retrieves a single record by ID with an executor, and panics on error.
func FindOkprofileP(exec boil.Executor, idProfile int, selectCols ...string) *Okprofile {
	retobj, err := FindOkprofile(exec, idProfile, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Okprofile) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Okprofile) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Okprofile) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Okprofile) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no okprofile provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(okprofileColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	okprofileInsertCacheMut.RLock()
	cache, cached := okprofileInsertCache[key]
	okprofileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			okprofileColumns,
			okprofileColumnsWithDefault,
			okprofileColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(okprofileType, okprofileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(okprofileType, okprofileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `okprofile` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `okprofile` () VALUES ()"
		}

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `okprofile` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, okprofilePrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into okprofile")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.IDProfile = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == okprofileMapping["IDProfile"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.IDProfile,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for okprofile")
	}

CacheNoHooks:
	if !cached {
		okprofileInsertCacheMut.Lock()
		okprofileInsertCache[key] = cache
		okprofileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Okprofile record. See Update for
// whitelist behavior description.
func (o *Okprofile) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Okprofile record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Okprofile) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Okprofile, and panics on error.
// See Update for whitelist behavior description.
func (o *Okprofile) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Okprofile.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Okprofile) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	okprofileUpdateCacheMut.RLock()
	cache, cached := okprofileUpdateCache[key]
	okprofileUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(okprofileColumns, okprofilePrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update okprofile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `okprofile` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, okprofilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(okprofileType, okprofileMapping, append(wl, okprofilePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update okprofile row")
	}

	if !cached {
		okprofileUpdateCacheMut.Lock()
		okprofileUpdateCache[key] = cache
		okprofileUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q okprofileQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q okprofileQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for okprofile")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OkprofileSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o OkprofileSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o OkprofileSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OkprofileSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), okprofilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `okprofile` SET %s WHERE (`id_profile`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(okprofilePrimaryKeyColumns), len(colNames)+1, len(okprofilePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in okprofile slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Okprofile) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Okprofile) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Okprofile) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Okprofile) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no okprofile provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(okprofileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	okprofileUpsertCacheMut.RLock()
	cache, cached := okprofileUpsertCache[key]
	okprofileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			okprofileColumns,
			okprofileColumnsWithDefault,
			okprofileColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			okprofileColumns,
			okprofilePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert okprofile, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "okprofile", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `okprofile` WHERE `id_profile`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(okprofileType, okprofileMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(okprofileType, okprofileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for okprofile")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.IDProfile = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == okprofileMapping["IDProfile"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.IDProfile,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for okprofile")
	}

CacheNoHooks:
	if !cached {
		okprofileUpsertCacheMut.Lock()
		okprofileUpsertCache[key] = cache
		okprofileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Okprofile record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Okprofile) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Okprofile record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Okprofile) DeleteG() error {
	if o == nil {
		return errors.New("models: no Okprofile provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Okprofile record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Okprofile) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Okprofile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Okprofile) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Okprofile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), okprofilePrimaryKeyMapping)
	sql := "DELETE FROM `okprofile` WHERE `id_profile`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from okprofile")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q okprofileQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q okprofileQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no okprofileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from okprofile")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o OkprofileSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o OkprofileSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Okprofile slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o OkprofileSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OkprofileSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Okprofile slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(okprofileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), okprofilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `okprofile` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, okprofilePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(okprofilePrimaryKeyColumns), 1, len(okprofilePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from okprofile slice")
	}

	if len(okprofileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Okprofile) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Okprofile) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Okprofile) ReloadG() error {
	if o == nil {
		return errors.New("models: no Okprofile provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Okprofile) Reload(exec boil.Executor) error {
	ret, err := FindOkprofile(exec, o.IDProfile)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OkprofileSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OkprofileSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OkprofileSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty OkprofileSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OkprofileSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	okprofiles := OkprofileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), okprofilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `okprofile`.* FROM `okprofile` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, okprofilePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(okprofilePrimaryKeyColumns), 1, len(okprofilePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&okprofiles)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OkprofileSlice")
	}

	*o = okprofiles

	return nil
}

// OkprofileExists checks if the Okprofile row exists.
func OkprofileExists(exec boil.Executor, idProfile int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `okprofile` where `id_profile`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, idProfile)
	}

	row := exec.QueryRow(sql, idProfile)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if okprofile exists")
	}

	return exists, nil
}

// OkprofileExistsG checks if the Okprofile row exists.
func OkprofileExistsG(idProfile int) (bool, error) {
	return OkprofileExists(boil.GetDB(), idProfile)
}

// OkprofileExistsGP checks if the Okprofile row exists. Panics on error.
func OkprofileExistsGP(idProfile int) bool {
	e, err := OkprofileExists(boil.GetDB(), idProfile)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// OkprofileExistsP checks if the Okprofile row exists. Panics on error.
func OkprofileExistsP(exec boil.Executor, idProfile int) bool {
	e, err := OkprofileExists(exec, idProfile)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
