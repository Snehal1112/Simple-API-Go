// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testOkakuns(t *testing.T) {
	t.Parallel()

	query := Okakuns(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testOkakunsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = okakun.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOkakunsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Okakuns(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOkakunsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OkakunSlice{okakun}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testOkakunsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := OkakunExists(tx, okakun.IDAkun)
	if err != nil {
		t.Errorf("Unable to check if Okakun exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OkakunExistsG to return true, but got false.")
	}
}
func testOkakunsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	okakunFound, err := FindOkakun(tx, okakun.IDAkun)
	if err != nil {
		t.Error(err)
	}

	if okakunFound == nil {
		t.Error("want a record, got nil")
	}
}
func testOkakunsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Okakuns(tx).Bind(okakun); err != nil {
		t.Error(err)
	}
}

func testOkakunsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Okakuns(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOkakunsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakunOne := &Okakun{}
	okakunTwo := &Okakun{}
	if err = randomize.Struct(seed, okakunOne, okakunDBTypes, false, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}
	if err = randomize.Struct(seed, okakunTwo, okakunDBTypes, false, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakunOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = okakunTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Okakuns(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOkakunsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	okakunOne := &Okakun{}
	okakunTwo := &Okakun{}
	if err = randomize.Struct(seed, okakunOne, okakunDBTypes, false, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}
	if err = randomize.Struct(seed, okakunTwo, okakunDBTypes, false, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakunOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = okakunTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func okakunBeforeInsertHook(e boil.Executor, o *Okakun) error {
	*o = Okakun{}
	return nil
}

func okakunAfterInsertHook(e boil.Executor, o *Okakun) error {
	*o = Okakun{}
	return nil
}

func okakunAfterSelectHook(e boil.Executor, o *Okakun) error {
	*o = Okakun{}
	return nil
}

func okakunBeforeUpdateHook(e boil.Executor, o *Okakun) error {
	*o = Okakun{}
	return nil
}

func okakunAfterUpdateHook(e boil.Executor, o *Okakun) error {
	*o = Okakun{}
	return nil
}

func okakunBeforeDeleteHook(e boil.Executor, o *Okakun) error {
	*o = Okakun{}
	return nil
}

func okakunAfterDeleteHook(e boil.Executor, o *Okakun) error {
	*o = Okakun{}
	return nil
}

func okakunBeforeUpsertHook(e boil.Executor, o *Okakun) error {
	*o = Okakun{}
	return nil
}

func okakunAfterUpsertHook(e boil.Executor, o *Okakun) error {
	*o = Okakun{}
	return nil
}

func testOkakunsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Okakun{}
	o := &Okakun{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, okakunDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Okakun object: %s", err)
	}

	AddOkakunHook(boil.BeforeInsertHook, okakunBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	okakunBeforeInsertHooks = []OkakunHook{}

	AddOkakunHook(boil.AfterInsertHook, okakunAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	okakunAfterInsertHooks = []OkakunHook{}

	AddOkakunHook(boil.AfterSelectHook, okakunAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	okakunAfterSelectHooks = []OkakunHook{}

	AddOkakunHook(boil.BeforeUpdateHook, okakunBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	okakunBeforeUpdateHooks = []OkakunHook{}

	AddOkakunHook(boil.AfterUpdateHook, okakunAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	okakunAfterUpdateHooks = []OkakunHook{}

	AddOkakunHook(boil.BeforeDeleteHook, okakunBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	okakunBeforeDeleteHooks = []OkakunHook{}

	AddOkakunHook(boil.AfterDeleteHook, okakunAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	okakunAfterDeleteHooks = []OkakunHook{}

	AddOkakunHook(boil.BeforeUpsertHook, okakunBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	okakunBeforeUpsertHooks = []OkakunHook{}

	AddOkakunHook(boil.AfterUpsertHook, okakunAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	okakunAfterUpsertHooks = []OkakunHook{}
}
func testOkakunsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOkakunsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx, okakunColumns...); err != nil {
		t.Error(err)
	}

	count, err := Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOkakunToManyAkunOkprofiles(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okakun
	var b, c Okprofile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, okprofileDBTypes, false, okprofileColumnsWithDefault...)
	randomize.Struct(seed, &c, okprofileDBTypes, false, okprofileColumnsWithDefault...)

	b.AkunID = a.IDAkun
	c.AkunID = a.IDAkun
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	okprofile, err := a.AkunOkprofiles(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range okprofile {
		if v.AkunID == b.AkunID {
			bFound = true
		}
		if v.AkunID == c.AkunID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OkakunSlice{&a}
	if err = a.L.LoadAkunOkprofiles(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AkunOkprofiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AkunOkprofiles = nil
	if err = a.L.LoadAkunOkprofiles(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AkunOkprofiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", okprofile)
	}
}

func testOkakunToManyAddOpAkunOkprofiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okakun
	var b, c, d, e Okprofile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okakunDBTypes, false, strmangle.SetComplement(okakunPrimaryKeyColumns, okakunColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Okprofile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, okprofileDBTypes, false, strmangle.SetComplement(okprofilePrimaryKeyColumns, okprofileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Okprofile{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAkunOkprofiles(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.IDAkun != first.AkunID {
			t.Error("foreign key was wrong value", a.IDAkun, first.AkunID)
		}
		if a.IDAkun != second.AkunID {
			t.Error("foreign key was wrong value", a.IDAkun, second.AkunID)
		}

		if first.R.Akun != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Akun != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AkunOkprofiles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AkunOkprofiles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AkunOkprofiles(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOkakunsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = okakun.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOkakunsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OkakunSlice{okakun}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testOkakunsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Okakuns(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	okakunDBTypes = map[string]string{`CreatedAt`: `datetime`, `IDAkun`: `int`, `Password`: `varchar`, `Role`: `varchar`, `Token`: `text`, `UpdatedAt`: `datetime`, `Username`: `varchar`}
	_             = bytes.MinRead
)

func testOkakunsUpdate(t *testing.T) {
	t.Parallel()

	if len(okakunColumns) == len(okakunPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	if err = okakun.Update(tx); err != nil {
		t.Error(err)
	}
}

func testOkakunsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(okakunColumns) == len(okakunPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	okakun := &Okakun{}
	if err = randomize.Struct(seed, okakun, okakunDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, okakun, okakunDBTypes, true, okakunPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(okakunColumns, okakunPrimaryKeyColumns) {
		fields = okakunColumns
	} else {
		fields = strmangle.SetComplement(
			okakunColumns,
			okakunPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(okakun))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := OkakunSlice{okakun}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testOkakunsUpsert(t *testing.T) {
	t.Parallel()

	if len(okakunColumns) == len(okakunPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	okakun := Okakun{}
	if err = randomize.Struct(seed, &okakun, okakunDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okakun.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Okakun: %s", err)
	}

	count, err := Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &okakun, okakunDBTypes, false, okakunPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	if err = okakun.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Okakun: %s", err)
	}

	count, err = Okakuns(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
