// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testOkprofiles(t *testing.T) {
	t.Parallel()

	query := Okprofiles(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testOkprofilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = okprofile.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOkprofilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Okprofiles(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOkprofilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OkprofileSlice{okprofile}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testOkprofilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := OkprofileExists(tx, okprofile.IDProfile)
	if err != nil {
		t.Errorf("Unable to check if Okprofile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OkprofileExistsG to return true, but got false.")
	}
}
func testOkprofilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	okprofileFound, err := FindOkprofile(tx, okprofile.IDProfile)
	if err != nil {
		t.Error(err)
	}

	if okprofileFound == nil {
		t.Error("want a record, got nil")
	}
}
func testOkprofilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Okprofiles(tx).Bind(okprofile); err != nil {
		t.Error(err)
	}
}

func testOkprofilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Okprofiles(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOkprofilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofileOne := &Okprofile{}
	okprofileTwo := &Okprofile{}
	if err = randomize.Struct(seed, okprofileOne, okprofileDBTypes, false, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}
	if err = randomize.Struct(seed, okprofileTwo, okprofileDBTypes, false, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofileOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = okprofileTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Okprofiles(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOkprofilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	okprofileOne := &Okprofile{}
	okprofileTwo := &Okprofile{}
	if err = randomize.Struct(seed, okprofileOne, okprofileDBTypes, false, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}
	if err = randomize.Struct(seed, okprofileTwo, okprofileDBTypes, false, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofileOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = okprofileTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func okprofileBeforeInsertHook(e boil.Executor, o *Okprofile) error {
	*o = Okprofile{}
	return nil
}

func okprofileAfterInsertHook(e boil.Executor, o *Okprofile) error {
	*o = Okprofile{}
	return nil
}

func okprofileAfterSelectHook(e boil.Executor, o *Okprofile) error {
	*o = Okprofile{}
	return nil
}

func okprofileBeforeUpdateHook(e boil.Executor, o *Okprofile) error {
	*o = Okprofile{}
	return nil
}

func okprofileAfterUpdateHook(e boil.Executor, o *Okprofile) error {
	*o = Okprofile{}
	return nil
}

func okprofileBeforeDeleteHook(e boil.Executor, o *Okprofile) error {
	*o = Okprofile{}
	return nil
}

func okprofileAfterDeleteHook(e boil.Executor, o *Okprofile) error {
	*o = Okprofile{}
	return nil
}

func okprofileBeforeUpsertHook(e boil.Executor, o *Okprofile) error {
	*o = Okprofile{}
	return nil
}

func okprofileAfterUpsertHook(e boil.Executor, o *Okprofile) error {
	*o = Okprofile{}
	return nil
}

func testOkprofilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Okprofile{}
	o := &Okprofile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, okprofileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Okprofile object: %s", err)
	}

	AddOkprofileHook(boil.BeforeInsertHook, okprofileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	okprofileBeforeInsertHooks = []OkprofileHook{}

	AddOkprofileHook(boil.AfterInsertHook, okprofileAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	okprofileAfterInsertHooks = []OkprofileHook{}

	AddOkprofileHook(boil.AfterSelectHook, okprofileAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	okprofileAfterSelectHooks = []OkprofileHook{}

	AddOkprofileHook(boil.BeforeUpdateHook, okprofileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	okprofileBeforeUpdateHooks = []OkprofileHook{}

	AddOkprofileHook(boil.AfterUpdateHook, okprofileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	okprofileAfterUpdateHooks = []OkprofileHook{}

	AddOkprofileHook(boil.BeforeDeleteHook, okprofileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	okprofileBeforeDeleteHooks = []OkprofileHook{}

	AddOkprofileHook(boil.AfterDeleteHook, okprofileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	okprofileAfterDeleteHooks = []OkprofileHook{}

	AddOkprofileHook(boil.BeforeUpsertHook, okprofileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	okprofileBeforeUpsertHooks = []OkprofileHook{}

	AddOkprofileHook(boil.AfterUpsertHook, okprofileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	okprofileAfterUpsertHooks = []OkprofileHook{}
}
func testOkprofilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOkprofilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx, okprofileColumns...); err != nil {
		t.Error(err)
	}

	count, err := Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOkprofileToManyAssignedtoOkprojecttasks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okprofile
	var b, c Okprojecttask

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...)
	randomize.Struct(seed, &c, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...)

	b.AssignedtoID = a.IDProfile
	c.AssignedtoID = a.IDProfile
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	okprojecttask, err := a.AssignedtoOkprojecttasks(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range okprojecttask {
		if v.AssignedtoID == b.AssignedtoID {
			bFound = true
		}
		if v.AssignedtoID == c.AssignedtoID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OkprofileSlice{&a}
	if err = a.L.LoadAssignedtoOkprojecttasks(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignedtoOkprojecttasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AssignedtoOkprojecttasks = nil
	if err = a.L.LoadAssignedtoOkprojecttasks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignedtoOkprojecttasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", okprojecttask)
	}
}

func testOkprofileToManyAssignerOkprojecttasks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okprofile
	var b, c Okprojecttask

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...)
	randomize.Struct(seed, &c, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...)

	b.AssignerID = a.IDProfile
	c.AssignerID = a.IDProfile
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	okprojecttask, err := a.AssignerOkprojecttasks(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range okprojecttask {
		if v.AssignerID == b.AssignerID {
			bFound = true
		}
		if v.AssignerID == c.AssignerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OkprofileSlice{&a}
	if err = a.L.LoadAssignerOkprojecttasks(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignerOkprojecttasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AssignerOkprojecttasks = nil
	if err = a.L.LoadAssignerOkprojecttasks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignerOkprojecttasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", okprojecttask)
	}
}

func testOkprofileToManyAddOpAssignedtoOkprojecttasks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okprofile
	var b, c, d, e Okprojecttask

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprofileDBTypes, false, strmangle.SetComplement(okprofilePrimaryKeyColumns, okprofileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Okprojecttask{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, okprojecttaskDBTypes, false, strmangle.SetComplement(okprojecttaskPrimaryKeyColumns, okprojecttaskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Okprojecttask{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssignedtoOkprojecttasks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.IDProfile != first.AssignedtoID {
			t.Error("foreign key was wrong value", a.IDProfile, first.AssignedtoID)
		}
		if a.IDProfile != second.AssignedtoID {
			t.Error("foreign key was wrong value", a.IDProfile, second.AssignedtoID)
		}

		if first.R.Assignedto != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Assignedto != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AssignedtoOkprojecttasks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AssignedtoOkprojecttasks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AssignedtoOkprojecttasks(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOkprofileToManyAddOpAssignerOkprojecttasks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okprofile
	var b, c, d, e Okprojecttask

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprofileDBTypes, false, strmangle.SetComplement(okprofilePrimaryKeyColumns, okprofileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Okprojecttask{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, okprojecttaskDBTypes, false, strmangle.SetComplement(okprojecttaskPrimaryKeyColumns, okprojecttaskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Okprojecttask{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssignerOkprojecttasks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.IDProfile != first.AssignerID {
			t.Error("foreign key was wrong value", a.IDProfile, first.AssignerID)
		}
		if a.IDProfile != second.AssignerID {
			t.Error("foreign key was wrong value", a.IDProfile, second.AssignerID)
		}

		if first.R.Assigner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Assigner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AssignerOkprojecttasks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AssignerOkprojecttasks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AssignerOkprojecttasks(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOkprofileToOneOkakunUsingAkun(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Okprofile
	var foreign Okakun

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, okakunDBTypes, true, okakunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okakun struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.AkunID = foreign.IDAkun
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Akun(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.IDAkun != foreign.IDAkun {
		t.Errorf("want: %v, got %v", foreign.IDAkun, check.IDAkun)
	}

	slice := OkprofileSlice{&local}
	if err = local.L.LoadAkun(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Akun == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Akun = nil
	if err = local.L.LoadAkun(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Akun == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOkprofileToOneSetOpOkakunUsingAkun(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okprofile
	var b, c Okakun

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprofileDBTypes, false, strmangle.SetComplement(okprofilePrimaryKeyColumns, okprofileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, okakunDBTypes, false, strmangle.SetComplement(okakunPrimaryKeyColumns, okakunColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, okakunDBTypes, false, strmangle.SetComplement(okakunPrimaryKeyColumns, okakunColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Okakun{&b, &c} {
		err = a.SetAkun(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Akun != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AkunOkprofiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AkunID != x.IDAkun {
			t.Error("foreign key was wrong value", a.AkunID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AkunID))
		reflect.Indirect(reflect.ValueOf(&a.AkunID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AkunID != x.IDAkun {
			t.Error("foreign key was wrong value", a.AkunID, x.IDAkun)
		}
	}
}
func testOkprofilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = okprofile.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOkprofilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OkprofileSlice{okprofile}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testOkprofilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Okprofiles(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	okprofileDBTypes = map[string]string{`AkunID`: `int`, `CreatedAt`: `datetime`, `CurrentStatus`: `varchar`, `FirstName`: `varchar`, `IDProfile`: `int`, `LastName`: `varchar`, `Photo`: `varchar`, `UpdatedAt`: `datetime`}
	_                = bytes.MinRead
)

func testOkprofilesUpdate(t *testing.T) {
	t.Parallel()

	if len(okprofileColumns) == len(okprofilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	if err = okprofile.Update(tx); err != nil {
		t.Error(err)
	}
}

func testOkprofilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(okprofileColumns) == len(okprofilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	okprofile := &Okprofile{}
	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, okprofile, okprofileDBTypes, true, okprofilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(okprofileColumns, okprofilePrimaryKeyColumns) {
		fields = okprofileColumns
	} else {
		fields = strmangle.SetComplement(
			okprofileColumns,
			okprofilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(okprofile))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := OkprofileSlice{okprofile}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testOkprofilesUpsert(t *testing.T) {
	t.Parallel()

	if len(okprofileColumns) == len(okprofilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	okprofile := Okprofile{}
	if err = randomize.Struct(seed, &okprofile, okprofileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprofile.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Okprofile: %s", err)
	}

	count, err := Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &okprofile, okprofileDBTypes, false, okprofilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	if err = okprofile.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Okprofile: %s", err)
	}

	count, err = Okprofiles(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
