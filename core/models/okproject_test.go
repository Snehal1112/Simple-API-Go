// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testOkprojects(t *testing.T) {
	t.Parallel()

	query := Okprojects(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testOkprojectsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = okproject.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOkprojectsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Okprojects(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOkprojectsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OkprojectSlice{okproject}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testOkprojectsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := OkprojectExists(tx, okproject.IDProject)
	if err != nil {
		t.Errorf("Unable to check if Okproject exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OkprojectExistsG to return true, but got false.")
	}
}
func testOkprojectsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	okprojectFound, err := FindOkproject(tx, okproject.IDProject)
	if err != nil {
		t.Error(err)
	}

	if okprojectFound == nil {
		t.Error("want a record, got nil")
	}
}
func testOkprojectsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Okprojects(tx).Bind(okproject); err != nil {
		t.Error(err)
	}
}

func testOkprojectsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Okprojects(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOkprojectsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojectOne := &Okproject{}
	okprojectTwo := &Okproject{}
	if err = randomize.Struct(seed, okprojectOne, okprojectDBTypes, false, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}
	if err = randomize.Struct(seed, okprojectTwo, okprojectDBTypes, false, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojectOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = okprojectTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Okprojects(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOkprojectsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	okprojectOne := &Okproject{}
	okprojectTwo := &Okproject{}
	if err = randomize.Struct(seed, okprojectOne, okprojectDBTypes, false, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}
	if err = randomize.Struct(seed, okprojectTwo, okprojectDBTypes, false, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojectOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = okprojectTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func okprojectBeforeInsertHook(e boil.Executor, o *Okproject) error {
	*o = Okproject{}
	return nil
}

func okprojectAfterInsertHook(e boil.Executor, o *Okproject) error {
	*o = Okproject{}
	return nil
}

func okprojectAfterSelectHook(e boil.Executor, o *Okproject) error {
	*o = Okproject{}
	return nil
}

func okprojectBeforeUpdateHook(e boil.Executor, o *Okproject) error {
	*o = Okproject{}
	return nil
}

func okprojectAfterUpdateHook(e boil.Executor, o *Okproject) error {
	*o = Okproject{}
	return nil
}

func okprojectBeforeDeleteHook(e boil.Executor, o *Okproject) error {
	*o = Okproject{}
	return nil
}

func okprojectAfterDeleteHook(e boil.Executor, o *Okproject) error {
	*o = Okproject{}
	return nil
}

func okprojectBeforeUpsertHook(e boil.Executor, o *Okproject) error {
	*o = Okproject{}
	return nil
}

func okprojectAfterUpsertHook(e boil.Executor, o *Okproject) error {
	*o = Okproject{}
	return nil
}

func testOkprojectsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Okproject{}
	o := &Okproject{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, okprojectDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Okproject object: %s", err)
	}

	AddOkprojectHook(boil.BeforeInsertHook, okprojectBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	okprojectBeforeInsertHooks = []OkprojectHook{}

	AddOkprojectHook(boil.AfterInsertHook, okprojectAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	okprojectAfterInsertHooks = []OkprojectHook{}

	AddOkprojectHook(boil.AfterSelectHook, okprojectAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	okprojectAfterSelectHooks = []OkprojectHook{}

	AddOkprojectHook(boil.BeforeUpdateHook, okprojectBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	okprojectBeforeUpdateHooks = []OkprojectHook{}

	AddOkprojectHook(boil.AfterUpdateHook, okprojectAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	okprojectAfterUpdateHooks = []OkprojectHook{}

	AddOkprojectHook(boil.BeforeDeleteHook, okprojectBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	okprojectBeforeDeleteHooks = []OkprojectHook{}

	AddOkprojectHook(boil.AfterDeleteHook, okprojectAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	okprojectAfterDeleteHooks = []OkprojectHook{}

	AddOkprojectHook(boil.BeforeUpsertHook, okprojectBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	okprojectBeforeUpsertHooks = []OkprojectHook{}

	AddOkprojectHook(boil.AfterUpsertHook, okprojectAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	okprojectAfterUpsertHooks = []OkprojectHook{}
}
func testOkprojectsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOkprojectsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx, okprojectColumns...); err != nil {
		t.Error(err)
	}

	count, err := Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOkprojectToManyProjectOkprojecttasks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okproject
	var b, c Okprojecttask

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...)
	randomize.Struct(seed, &c, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...)

	b.ProjectID = a.IDProject
	c.ProjectID = a.IDProject
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	okprojecttask, err := a.ProjectOkprojecttasks(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range okprojecttask {
		if v.ProjectID == b.ProjectID {
			bFound = true
		}
		if v.ProjectID == c.ProjectID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OkprojectSlice{&a}
	if err = a.L.LoadProjectOkprojecttasks(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProjectOkprojecttasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProjectOkprojecttasks = nil
	if err = a.L.LoadProjectOkprojecttasks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProjectOkprojecttasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", okprojecttask)
	}
}

func testOkprojectToManyAddOpProjectOkprojecttasks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okproject
	var b, c, d, e Okprojecttask

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprojectDBTypes, false, strmangle.SetComplement(okprojectPrimaryKeyColumns, okprojectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Okprojecttask{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, okprojecttaskDBTypes, false, strmangle.SetComplement(okprojecttaskPrimaryKeyColumns, okprojecttaskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Okprojecttask{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProjectOkprojecttasks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.IDProject != first.ProjectID {
			t.Error("foreign key was wrong value", a.IDProject, first.ProjectID)
		}
		if a.IDProject != second.ProjectID {
			t.Error("foreign key was wrong value", a.IDProject, second.ProjectID)
		}

		if first.R.Project != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Project != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProjectOkprojecttasks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProjectOkprojecttasks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProjectOkprojecttasks(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOkprojectsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = okproject.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOkprojectsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OkprojectSlice{okproject}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testOkprojectsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Okprojects(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	okprojectDBTypes = map[string]string{`Desc`: `text`, `GitURL`: `text`, `IDProject`: `int`, `NamaProject`: `varchar`}
	_                = bytes.MinRead
)

func testOkprojectsUpdate(t *testing.T) {
	t.Parallel()

	if len(okprojectColumns) == len(okprojectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	if err = okproject.Update(tx); err != nil {
		t.Error(err)
	}
}

func testOkprojectsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(okprojectColumns) == len(okprojectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	okproject := &Okproject{}
	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, okproject, okprojectDBTypes, true, okprojectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(okprojectColumns, okprojectPrimaryKeyColumns) {
		fields = okprojectColumns
	} else {
		fields = strmangle.SetComplement(
			okprojectColumns,
			okprojectPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(okproject))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := OkprojectSlice{okproject}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testOkprojectsUpsert(t *testing.T) {
	t.Parallel()

	if len(okprojectColumns) == len(okprojectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	okproject := Okproject{}
	if err = randomize.Struct(seed, &okproject, okprojectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okproject.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Okproject: %s", err)
	}

	count, err := Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &okproject, okprojectDBTypes, false, okprojectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	if err = okproject.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Okproject: %s", err)
	}

	count, err = Okprojects(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
