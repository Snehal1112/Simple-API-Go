// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testOkprojecttasks(t *testing.T) {
	t.Parallel()

	query := Okprojecttasks(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testOkprojecttasksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = okprojecttask.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOkprojecttasksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Okprojecttasks(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOkprojecttasksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OkprojecttaskSlice{okprojecttask}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testOkprojecttasksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := OkprojecttaskExists(tx, okprojecttask.IDPTask)
	if err != nil {
		t.Errorf("Unable to check if Okprojecttask exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OkprojecttaskExistsG to return true, but got false.")
	}
}
func testOkprojecttasksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	okprojecttaskFound, err := FindOkprojecttask(tx, okprojecttask.IDPTask)
	if err != nil {
		t.Error(err)
	}

	if okprojecttaskFound == nil {
		t.Error("want a record, got nil")
	}
}
func testOkprojecttasksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Okprojecttasks(tx).Bind(okprojecttask); err != nil {
		t.Error(err)
	}
}

func testOkprojecttasksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Okprojecttasks(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOkprojecttasksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttaskOne := &Okprojecttask{}
	okprojecttaskTwo := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttaskOne, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}
	if err = randomize.Struct(seed, okprojecttaskTwo, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttaskOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = okprojecttaskTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Okprojecttasks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOkprojecttasksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	okprojecttaskOne := &Okprojecttask{}
	okprojecttaskTwo := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttaskOne, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}
	if err = randomize.Struct(seed, okprojecttaskTwo, okprojecttaskDBTypes, false, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttaskOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = okprojecttaskTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func okprojecttaskBeforeInsertHook(e boil.Executor, o *Okprojecttask) error {
	*o = Okprojecttask{}
	return nil
}

func okprojecttaskAfterInsertHook(e boil.Executor, o *Okprojecttask) error {
	*o = Okprojecttask{}
	return nil
}

func okprojecttaskAfterSelectHook(e boil.Executor, o *Okprojecttask) error {
	*o = Okprojecttask{}
	return nil
}

func okprojecttaskBeforeUpdateHook(e boil.Executor, o *Okprojecttask) error {
	*o = Okprojecttask{}
	return nil
}

func okprojecttaskAfterUpdateHook(e boil.Executor, o *Okprojecttask) error {
	*o = Okprojecttask{}
	return nil
}

func okprojecttaskBeforeDeleteHook(e boil.Executor, o *Okprojecttask) error {
	*o = Okprojecttask{}
	return nil
}

func okprojecttaskAfterDeleteHook(e boil.Executor, o *Okprojecttask) error {
	*o = Okprojecttask{}
	return nil
}

func okprojecttaskBeforeUpsertHook(e boil.Executor, o *Okprojecttask) error {
	*o = Okprojecttask{}
	return nil
}

func okprojecttaskAfterUpsertHook(e boil.Executor, o *Okprojecttask) error {
	*o = Okprojecttask{}
	return nil
}

func testOkprojecttasksHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Okprojecttask{}
	o := &Okprojecttask{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, okprojecttaskDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Okprojecttask object: %s", err)
	}

	AddOkprojecttaskHook(boil.BeforeInsertHook, okprojecttaskBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	okprojecttaskBeforeInsertHooks = []OkprojecttaskHook{}

	AddOkprojecttaskHook(boil.AfterInsertHook, okprojecttaskAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	okprojecttaskAfterInsertHooks = []OkprojecttaskHook{}

	AddOkprojecttaskHook(boil.AfterSelectHook, okprojecttaskAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	okprojecttaskAfterSelectHooks = []OkprojecttaskHook{}

	AddOkprojecttaskHook(boil.BeforeUpdateHook, okprojecttaskBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	okprojecttaskBeforeUpdateHooks = []OkprojecttaskHook{}

	AddOkprojecttaskHook(boil.AfterUpdateHook, okprojecttaskAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	okprojecttaskAfterUpdateHooks = []OkprojecttaskHook{}

	AddOkprojecttaskHook(boil.BeforeDeleteHook, okprojecttaskBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	okprojecttaskBeforeDeleteHooks = []OkprojecttaskHook{}

	AddOkprojecttaskHook(boil.AfterDeleteHook, okprojecttaskAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	okprojecttaskAfterDeleteHooks = []OkprojecttaskHook{}

	AddOkprojecttaskHook(boil.BeforeUpsertHook, okprojecttaskBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	okprojecttaskBeforeUpsertHooks = []OkprojecttaskHook{}

	AddOkprojecttaskHook(boil.AfterUpsertHook, okprojecttaskAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	okprojecttaskAfterUpsertHooks = []OkprojecttaskHook{}
}
func testOkprojecttasksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOkprojecttasksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx, okprojecttaskColumns...); err != nil {
		t.Error(err)
	}

	count, err := Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOkprojecttaskToOneOkprofileUsingAssignedto(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Okprojecttask
	var foreign Okprofile

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.AssignedtoID = foreign.IDProfile
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Assignedto(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.IDProfile != foreign.IDProfile {
		t.Errorf("want: %v, got %v", foreign.IDProfile, check.IDProfile)
	}

	slice := OkprojecttaskSlice{&local}
	if err = local.L.LoadAssignedto(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignedto == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Assignedto = nil
	if err = local.L.LoadAssignedto(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignedto == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOkprojecttaskToOneOkprofileUsingAssigner(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Okprojecttask
	var foreign Okprofile

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, okprofileDBTypes, true, okprofileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprofile struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.AssignerID = foreign.IDProfile
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Assigner(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.IDProfile != foreign.IDProfile {
		t.Errorf("want: %v, got %v", foreign.IDProfile, check.IDProfile)
	}

	slice := OkprojecttaskSlice{&local}
	if err = local.L.LoadAssigner(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Assigner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Assigner = nil
	if err = local.L.LoadAssigner(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Assigner == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOkprojecttaskToOneOkprojectUsingProject(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Okprojecttask
	var foreign Okproject

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, okprojectDBTypes, true, okprojectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okproject struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.IDProject
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.IDProject != foreign.IDProject {
		t.Errorf("want: %v, got %v", foreign.IDProject, check.IDProject)
	}

	slice := OkprojecttaskSlice{&local}
	if err = local.L.LoadProject(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOkprojecttaskToOneOktaskUsingTask(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Okprojecttask
	var foreign Oktask

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, oktaskDBTypes, true, oktaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oktask struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.TaskID = foreign.IDTask
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Task(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.IDTask != foreign.IDTask {
		t.Errorf("want: %v, got %v", foreign.IDTask, check.IDTask)
	}

	slice := OkprojecttaskSlice{&local}
	if err = local.L.LoadTask(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Task = nil
	if err = local.L.LoadTask(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOkprojecttaskToOneSetOpOkprofileUsingAssignedto(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okprojecttask
	var b, c Okprofile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprojecttaskDBTypes, false, strmangle.SetComplement(okprojecttaskPrimaryKeyColumns, okprojecttaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, okprofileDBTypes, false, strmangle.SetComplement(okprofilePrimaryKeyColumns, okprofileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, okprofileDBTypes, false, strmangle.SetComplement(okprofilePrimaryKeyColumns, okprofileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Okprofile{&b, &c} {
		err = a.SetAssignedto(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Assignedto != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignedtoOkprojecttasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AssignedtoID != x.IDProfile {
			t.Error("foreign key was wrong value", a.AssignedtoID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AssignedtoID))
		reflect.Indirect(reflect.ValueOf(&a.AssignedtoID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AssignedtoID != x.IDProfile {
			t.Error("foreign key was wrong value", a.AssignedtoID, x.IDProfile)
		}
	}
}
func testOkprojecttaskToOneSetOpOkprofileUsingAssigner(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okprojecttask
	var b, c Okprofile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprojecttaskDBTypes, false, strmangle.SetComplement(okprojecttaskPrimaryKeyColumns, okprojecttaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, okprofileDBTypes, false, strmangle.SetComplement(okprofilePrimaryKeyColumns, okprofileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, okprofileDBTypes, false, strmangle.SetComplement(okprofilePrimaryKeyColumns, okprofileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Okprofile{&b, &c} {
		err = a.SetAssigner(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Assigner != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignerOkprojecttasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AssignerID != x.IDProfile {
			t.Error("foreign key was wrong value", a.AssignerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AssignerID))
		reflect.Indirect(reflect.ValueOf(&a.AssignerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AssignerID != x.IDProfile {
			t.Error("foreign key was wrong value", a.AssignerID, x.IDProfile)
		}
	}
}
func testOkprojecttaskToOneSetOpOkprojectUsingProject(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okprojecttask
	var b, c Okproject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprojecttaskDBTypes, false, strmangle.SetComplement(okprojecttaskPrimaryKeyColumns, okprojecttaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, okprojectDBTypes, false, strmangle.SetComplement(okprojectPrimaryKeyColumns, okprojectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, okprojectDBTypes, false, strmangle.SetComplement(okprojectPrimaryKeyColumns, okprojectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Okproject{&b, &c} {
		err = a.SetProject(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectOkprojecttasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.IDProject {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.IDProject {
			t.Error("foreign key was wrong value", a.ProjectID, x.IDProject)
		}
	}
}
func testOkprojecttaskToOneSetOpOktaskUsingTask(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Okprojecttask
	var b, c Oktask

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, okprojecttaskDBTypes, false, strmangle.SetComplement(okprojecttaskPrimaryKeyColumns, okprojecttaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, oktaskDBTypes, false, strmangle.SetComplement(oktaskPrimaryKeyColumns, oktaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, oktaskDBTypes, false, strmangle.SetComplement(oktaskPrimaryKeyColumns, oktaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Oktask{&b, &c} {
		err = a.SetTask(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Task != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TaskOkprojecttasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TaskID != x.IDTask {
			t.Error("foreign key was wrong value", a.TaskID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TaskID))
		reflect.Indirect(reflect.ValueOf(&a.TaskID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TaskID != x.IDTask {
			t.Error("foreign key was wrong value", a.TaskID, x.IDTask)
		}
	}
}
func testOkprojecttasksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = okprojecttask.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOkprojecttasksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OkprojecttaskSlice{okprojecttask}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testOkprojecttasksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Okprojecttasks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	okprojecttaskDBTypes = map[string]string{`AssignedtoID`: `int`, `AssignerID`: `int`, `CreatedAt`: `datetime`, `DueDate`: `datetime`, `IDPTask`: `int`, `ProjectID`: `int`, `Status`: `varchar`, `TaskID`: `int`, `UpdatedAt`: `datetime`}
	_                    = bytes.MinRead
)

func testOkprojecttasksUpdate(t *testing.T) {
	t.Parallel()

	if len(okprojecttaskColumns) == len(okprojecttaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	if err = okprojecttask.Update(tx); err != nil {
		t.Error(err)
	}
}

func testOkprojecttasksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(okprojecttaskColumns) == len(okprojecttaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	okprojecttask := &Okprojecttask{}
	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, okprojecttask, okprojecttaskDBTypes, true, okprojecttaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(okprojecttaskColumns, okprojecttaskPrimaryKeyColumns) {
		fields = okprojecttaskColumns
	} else {
		fields = strmangle.SetComplement(
			okprojecttaskColumns,
			okprojecttaskPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(okprojecttask))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := OkprojecttaskSlice{okprojecttask}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testOkprojecttasksUpsert(t *testing.T) {
	t.Parallel()

	if len(okprojecttaskColumns) == len(okprojecttaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	okprojecttask := Okprojecttask{}
	if err = randomize.Struct(seed, &okprojecttask, okprojecttaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = okprojecttask.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Okprojecttask: %s", err)
	}

	count, err := Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &okprojecttask, okprojecttaskDBTypes, false, okprojecttaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Okprojecttask struct: %s", err)
	}

	if err = okprojecttask.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Okprojecttask: %s", err)
	}

	count, err = Okprojecttasks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
