// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Okakun is an object representing the database table.
type Okakun struct {
	IDAkun    int       `boil:"id_akun" json:"id_akun" toml:"id_akun" yaml:"id_akun"`
	Username  string    `boil:"username" json:"username" toml:"username" yaml:"username"`
	Password  string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	Token     string    `boil:"token" json:"token" toml:"token" yaml:"token"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Role      string    `boil:"role" json:"role" toml:"role" yaml:"role"`

	R *okakunR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L okakunL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// okakunR is where relationships are stored.
type okakunR struct {
	AkunOkprofiles OkprofileSlice
}

// okakunL is where Load methods for each relationship are stored.
type okakunL struct{}

var (
	okakunColumns               = []string{"id_akun", "username", "password", "token", "created_at", "updated_at", "role"}
	okakunColumnsWithoutDefault = []string{"username", "password", "token", "created_at", "updated_at", "role"}
	okakunColumnsWithDefault    = []string{"id_akun"}
	okakunPrimaryKeyColumns     = []string{"id_akun"}
)

type (
	// OkakunSlice is an alias for a slice of pointers to Okakun.
	// This should generally be used opposed to []Okakun.
	OkakunSlice []*Okakun
	// OkakunHook is the signature for custom Okakun hook methods
	OkakunHook func(boil.Executor, *Okakun) error

	okakunQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	okakunType                 = reflect.TypeOf(&Okakun{})
	okakunMapping              = queries.MakeStructMapping(okakunType)
	okakunPrimaryKeyMapping, _ = queries.BindMapping(okakunType, okakunMapping, okakunPrimaryKeyColumns)
	okakunInsertCacheMut       sync.RWMutex
	okakunInsertCache          = make(map[string]insertCache)
	okakunUpdateCacheMut       sync.RWMutex
	okakunUpdateCache          = make(map[string]updateCache)
	okakunUpsertCacheMut       sync.RWMutex
	okakunUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var okakunBeforeInsertHooks []OkakunHook
var okakunBeforeUpdateHooks []OkakunHook
var okakunBeforeDeleteHooks []OkakunHook
var okakunBeforeUpsertHooks []OkakunHook

var okakunAfterInsertHooks []OkakunHook
var okakunAfterSelectHooks []OkakunHook
var okakunAfterUpdateHooks []OkakunHook
var okakunAfterDeleteHooks []OkakunHook
var okakunAfterUpsertHooks []OkakunHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Okakun) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range okakunBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Okakun) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range okakunBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Okakun) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range okakunBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Okakun) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range okakunBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Okakun) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range okakunAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Okakun) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range okakunAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Okakun) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range okakunAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Okakun) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range okakunAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Okakun) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range okakunAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOkakunHook registers your hook function for all future operations.
func AddOkakunHook(hookPoint boil.HookPoint, okakunHook OkakunHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		okakunBeforeInsertHooks = append(okakunBeforeInsertHooks, okakunHook)
	case boil.BeforeUpdateHook:
		okakunBeforeUpdateHooks = append(okakunBeforeUpdateHooks, okakunHook)
	case boil.BeforeDeleteHook:
		okakunBeforeDeleteHooks = append(okakunBeforeDeleteHooks, okakunHook)
	case boil.BeforeUpsertHook:
		okakunBeforeUpsertHooks = append(okakunBeforeUpsertHooks, okakunHook)
	case boil.AfterInsertHook:
		okakunAfterInsertHooks = append(okakunAfterInsertHooks, okakunHook)
	case boil.AfterSelectHook:
		okakunAfterSelectHooks = append(okakunAfterSelectHooks, okakunHook)
	case boil.AfterUpdateHook:
		okakunAfterUpdateHooks = append(okakunAfterUpdateHooks, okakunHook)
	case boil.AfterDeleteHook:
		okakunAfterDeleteHooks = append(okakunAfterDeleteHooks, okakunHook)
	case boil.AfterUpsertHook:
		okakunAfterUpsertHooks = append(okakunAfterUpsertHooks, okakunHook)
	}
}

// OneP returns a single okakun record from the query, and panics on error.
func (q okakunQuery) OneP() *Okakun {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single okakun record from the query.
func (q okakunQuery) One() (*Okakun, error) {
	o := &Okakun{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for okakun")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Okakun records from the query, and panics on error.
func (q okakunQuery) AllP() OkakunSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Okakun records from the query.
func (q okakunQuery) All() (OkakunSlice, error) {
	var o OkakunSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Okakun slice")
	}

	if len(okakunAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Okakun records in the query, and panics on error.
func (q okakunQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Okakun records in the query.
func (q okakunQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count okakun rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q okakunQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q okakunQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if okakun exists")
	}

	return count > 0, nil
}

// AkunOkprofilesG retrieves all the okprofile's okprofile via akun_id column.
func (o *Okakun) AkunOkprofilesG(mods ...qm.QueryMod) okprofileQuery {
	return o.AkunOkprofiles(boil.GetDB(), mods...)
}

// AkunOkprofiles retrieves all the okprofile's okprofile with an executor via akun_id column.
func (o *Okakun) AkunOkprofiles(exec boil.Executor, mods ...qm.QueryMod) okprofileQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`akun_id`=?", o.IDAkun),
	)

	query := Okprofiles(exec, queryMods...)
	queries.SetFrom(query.Query, "`okprofile` as `a`")
	return query
}

// LoadAkunOkprofiles allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (okakunL) LoadAkunOkprofiles(e boil.Executor, singular bool, maybeOkakun interface{}) error {
	var slice []*Okakun
	var object *Okakun

	count := 1
	if singular {
		object = maybeOkakun.(*Okakun)
	} else {
		slice = *maybeOkakun.(*OkakunSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &okakunR{}
		}
		args[0] = object.IDAkun
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &okakunR{}
			}
			args[i] = obj.IDAkun
		}
	}

	query := fmt.Sprintf(
		"select * from `okprofile` where `akun_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load okprofile")
	}
	defer results.Close()

	var resultSlice []*Okprofile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice okprofile")
	}

	if len(okprofileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AkunOkprofiles = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.IDAkun == foreign.AkunID {
				local.R.AkunOkprofiles = append(local.R.AkunOkprofiles, foreign)
				break
			}
		}
	}

	return nil
}

// AddAkunOkprofilesG adds the given related objects to the existing relationships
// of the okakun, optionally inserting them as new records.
// Appends related to o.R.AkunOkprofiles.
// Sets related.R.Akun appropriately.
// Uses the global database handle.
func (o *Okakun) AddAkunOkprofilesG(insert bool, related ...*Okprofile) error {
	return o.AddAkunOkprofiles(boil.GetDB(), insert, related...)
}

// AddAkunOkprofilesP adds the given related objects to the existing relationships
// of the okakun, optionally inserting them as new records.
// Appends related to o.R.AkunOkprofiles.
// Sets related.R.Akun appropriately.
// Panics on error.
func (o *Okakun) AddAkunOkprofilesP(exec boil.Executor, insert bool, related ...*Okprofile) {
	if err := o.AddAkunOkprofiles(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAkunOkprofilesGP adds the given related objects to the existing relationships
// of the okakun, optionally inserting them as new records.
// Appends related to o.R.AkunOkprofiles.
// Sets related.R.Akun appropriately.
// Uses the global database handle and panics on error.
func (o *Okakun) AddAkunOkprofilesGP(insert bool, related ...*Okprofile) {
	if err := o.AddAkunOkprofiles(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAkunOkprofiles adds the given related objects to the existing relationships
// of the okakun, optionally inserting them as new records.
// Appends related to o.R.AkunOkprofiles.
// Sets related.R.Akun appropriately.
func (o *Okakun) AddAkunOkprofiles(exec boil.Executor, insert bool, related ...*Okprofile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AkunID = o.IDAkun
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `okprofile` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"akun_id"}),
				strmangle.WhereClause("`", "`", 0, okprofilePrimaryKeyColumns),
			)
			values := []interface{}{o.IDAkun, rel.IDProfile}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AkunID = o.IDAkun
		}
	}

	if o.R == nil {
		o.R = &okakunR{
			AkunOkprofiles: related,
		}
	} else {
		o.R.AkunOkprofiles = append(o.R.AkunOkprofiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &okprofileR{
				Akun: o,
			}
		} else {
			rel.R.Akun = o
		}
	}
	return nil
}

// OkakunsG retrieves all records.
func OkakunsG(mods ...qm.QueryMod) okakunQuery {
	return Okakuns(boil.GetDB(), mods...)
}

// Okakuns retrieves all the records using an executor.
func Okakuns(exec boil.Executor, mods ...qm.QueryMod) okakunQuery {
	mods = append(mods, qm.From("`okakun`"))
	return okakunQuery{NewQuery(exec, mods...)}
}

// FindOkakunG retrieves a single record by ID.
func FindOkakunG(idAkun int, selectCols ...string) (*Okakun, error) {
	return FindOkakun(boil.GetDB(), idAkun, selectCols...)
}

// FindOkakunGP retrieves a single record by ID, and panics on error.
func FindOkakunGP(idAkun int, selectCols ...string) *Okakun {
	retobj, err := FindOkakun(boil.GetDB(), idAkun, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindOkakun retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOkakun(exec boil.Executor, idAkun int, selectCols ...string) (*Okakun, error) {
	okakunObj := &Okakun{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `okakun` where `id_akun`=?", sel,
	)

	q := queries.Raw(exec, query, idAkun)

	err := q.Bind(okakunObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from okakun")
	}

	return okakunObj, nil
}

// FindOkakunP retrieves a single record by ID with an executor, and panics on error.
func FindOkakunP(exec boil.Executor, idAkun int, selectCols ...string) *Okakun {
	retobj, err := FindOkakun(exec, idAkun, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Okakun) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Okakun) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Okakun) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Okakun) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no okakun provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(okakunColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	okakunInsertCacheMut.RLock()
	cache, cached := okakunInsertCache[key]
	okakunInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			okakunColumns,
			okakunColumnsWithDefault,
			okakunColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(okakunType, okakunMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(okakunType, okakunMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `okakun` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `okakun` () VALUES ()"
		}

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `okakun` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, okakunPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into okakun")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.IDAkun = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == okakunMapping["IDAkun"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.IDAkun,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for okakun")
	}

CacheNoHooks:
	if !cached {
		okakunInsertCacheMut.Lock()
		okakunInsertCache[key] = cache
		okakunInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Okakun record. See Update for
// whitelist behavior description.
func (o *Okakun) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Okakun record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Okakun) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Okakun, and panics on error.
// See Update for whitelist behavior description.
func (o *Okakun) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Okakun.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Okakun) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	okakunUpdateCacheMut.RLock()
	cache, cached := okakunUpdateCache[key]
	okakunUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(okakunColumns, okakunPrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update okakun, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `okakun` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, okakunPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(okakunType, okakunMapping, append(wl, okakunPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update okakun row")
	}

	if !cached {
		okakunUpdateCacheMut.Lock()
		okakunUpdateCache[key] = cache
		okakunUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q okakunQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q okakunQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for okakun")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OkakunSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o OkakunSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o OkakunSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OkakunSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), okakunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `okakun` SET %s WHERE (`id_akun`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(okakunPrimaryKeyColumns), len(colNames)+1, len(okakunPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in okakun slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Okakun) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Okakun) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Okakun) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Okakun) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no okakun provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(okakunColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	okakunUpsertCacheMut.RLock()
	cache, cached := okakunUpsertCache[key]
	okakunUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			okakunColumns,
			okakunColumnsWithDefault,
			okakunColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			okakunColumns,
			okakunPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert okakun, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "okakun", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `okakun` WHERE `id_akun`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(okakunType, okakunMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(okakunType, okakunMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for okakun")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.IDAkun = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == okakunMapping["IDAkun"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.IDAkun,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for okakun")
	}

CacheNoHooks:
	if !cached {
		okakunUpsertCacheMut.Lock()
		okakunUpsertCache[key] = cache
		okakunUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Okakun record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Okakun) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Okakun record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Okakun) DeleteG() error {
	if o == nil {
		return errors.New("models: no Okakun provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Okakun record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Okakun) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Okakun record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Okakun) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Okakun provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), okakunPrimaryKeyMapping)
	sql := "DELETE FROM `okakun` WHERE `id_akun`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from okakun")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q okakunQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q okakunQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no okakunQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from okakun")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o OkakunSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o OkakunSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Okakun slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o OkakunSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OkakunSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Okakun slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(okakunBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), okakunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `okakun` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, okakunPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(okakunPrimaryKeyColumns), 1, len(okakunPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from okakun slice")
	}

	if len(okakunAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Okakun) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Okakun) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Okakun) ReloadG() error {
	if o == nil {
		return errors.New("models: no Okakun provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Okakun) Reload(exec boil.Executor) error {
	ret, err := FindOkakun(exec, o.IDAkun)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OkakunSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OkakunSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OkakunSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty OkakunSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OkakunSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	okakuns := OkakunSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), okakunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `okakun`.* FROM `okakun` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, okakunPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(okakunPrimaryKeyColumns), 1, len(okakunPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&okakuns)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OkakunSlice")
	}

	*o = okakuns

	return nil
}

// OkakunExists checks if the Okakun row exists.
func OkakunExists(exec boil.Executor, idAkun int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `okakun` where `id_akun`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, idAkun)
	}

	row := exec.QueryRow(sql, idAkun)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if okakun exists")
	}

	return exists, nil
}

// OkakunExistsG checks if the Okakun row exists.
func OkakunExistsG(idAkun int) (bool, error) {
	return OkakunExists(boil.GetDB(), idAkun)
}

// OkakunExistsGP checks if the Okakun row exists. Panics on error.
func OkakunExistsGP(idAkun int) bool {
	e, err := OkakunExists(boil.GetDB(), idAkun)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// OkakunExistsP checks if the Okakun row exists. Panics on error.
func OkakunExistsP(exec boil.Executor, idAkun int) bool {
	e, err := OkakunExists(exec, idAkun)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
