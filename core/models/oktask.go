// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Oktask is an object representing the database table.
type Oktask struct {
	IDTask     int         `boil:"id_task" json:"id_task" toml:"id_task" yaml:"id_task"`
	TitleTask  string      `boil:"title_task" json:"title_task" toml:"title_task" yaml:"title_task"`
	Urgency    string      `boil:"urgency" json:"urgency" toml:"urgency" yaml:"urgency"`
	Difficulty string      `boil:"difficulty" json:"difficulty" toml:"difficulty" yaml:"difficulty"`
	DescTask   null.String `boil:"desc_task" json:"desc_task,omitempty" toml:"desc_task" yaml:"desc_task,omitempty"`

	R *oktaskR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oktaskL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// oktaskR is where relationships are stored.
type oktaskR struct {
	TaskOkprojecttasks OkprojecttaskSlice
}

// oktaskL is where Load methods for each relationship are stored.
type oktaskL struct{}

var (
	oktaskColumns               = []string{"id_task", "title_task", "urgency", "difficulty", "desc_task"}
	oktaskColumnsWithoutDefault = []string{"title_task", "urgency", "difficulty", "desc_task"}
	oktaskColumnsWithDefault    = []string{"id_task"}
	oktaskPrimaryKeyColumns     = []string{"id_task"}
)

type (
	// OktaskSlice is an alias for a slice of pointers to Oktask.
	// This should generally be used opposed to []Oktask.
	OktaskSlice []*Oktask
	// OktaskHook is the signature for custom Oktask hook methods
	OktaskHook func(boil.Executor, *Oktask) error

	oktaskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oktaskType                 = reflect.TypeOf(&Oktask{})
	oktaskMapping              = queries.MakeStructMapping(oktaskType)
	oktaskPrimaryKeyMapping, _ = queries.BindMapping(oktaskType, oktaskMapping, oktaskPrimaryKeyColumns)
	oktaskInsertCacheMut       sync.RWMutex
	oktaskInsertCache          = make(map[string]insertCache)
	oktaskUpdateCacheMut       sync.RWMutex
	oktaskUpdateCache          = make(map[string]updateCache)
	oktaskUpsertCacheMut       sync.RWMutex
	oktaskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var oktaskBeforeInsertHooks []OktaskHook
var oktaskBeforeUpdateHooks []OktaskHook
var oktaskBeforeDeleteHooks []OktaskHook
var oktaskBeforeUpsertHooks []OktaskHook

var oktaskAfterInsertHooks []OktaskHook
var oktaskAfterSelectHooks []OktaskHook
var oktaskAfterUpdateHooks []OktaskHook
var oktaskAfterDeleteHooks []OktaskHook
var oktaskAfterUpsertHooks []OktaskHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Oktask) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range oktaskBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Oktask) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range oktaskBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Oktask) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range oktaskBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Oktask) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range oktaskBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Oktask) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range oktaskAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Oktask) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range oktaskAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Oktask) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range oktaskAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Oktask) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range oktaskAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Oktask) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range oktaskAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOktaskHook registers your hook function for all future operations.
func AddOktaskHook(hookPoint boil.HookPoint, oktaskHook OktaskHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		oktaskBeforeInsertHooks = append(oktaskBeforeInsertHooks, oktaskHook)
	case boil.BeforeUpdateHook:
		oktaskBeforeUpdateHooks = append(oktaskBeforeUpdateHooks, oktaskHook)
	case boil.BeforeDeleteHook:
		oktaskBeforeDeleteHooks = append(oktaskBeforeDeleteHooks, oktaskHook)
	case boil.BeforeUpsertHook:
		oktaskBeforeUpsertHooks = append(oktaskBeforeUpsertHooks, oktaskHook)
	case boil.AfterInsertHook:
		oktaskAfterInsertHooks = append(oktaskAfterInsertHooks, oktaskHook)
	case boil.AfterSelectHook:
		oktaskAfterSelectHooks = append(oktaskAfterSelectHooks, oktaskHook)
	case boil.AfterUpdateHook:
		oktaskAfterUpdateHooks = append(oktaskAfterUpdateHooks, oktaskHook)
	case boil.AfterDeleteHook:
		oktaskAfterDeleteHooks = append(oktaskAfterDeleteHooks, oktaskHook)
	case boil.AfterUpsertHook:
		oktaskAfterUpsertHooks = append(oktaskAfterUpsertHooks, oktaskHook)
	}
}

// OneP returns a single oktask record from the query, and panics on error.
func (q oktaskQuery) OneP() *Oktask {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single oktask record from the query.
func (q oktaskQuery) One() (*Oktask, error) {
	o := &Oktask{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for oktask")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Oktask records from the query, and panics on error.
func (q oktaskQuery) AllP() OktaskSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Oktask records from the query.
func (q oktaskQuery) All() (OktaskSlice, error) {
	var o OktaskSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Oktask slice")
	}

	if len(oktaskAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Oktask records in the query, and panics on error.
func (q oktaskQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Oktask records in the query.
func (q oktaskQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count oktask rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q oktaskQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q oktaskQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if oktask exists")
	}

	return count > 0, nil
}

// TaskOkprojecttasksG retrieves all the okprojecttask's okprojecttask via task_id column.
func (o *Oktask) TaskOkprojecttasksG(mods ...qm.QueryMod) okprojecttaskQuery {
	return o.TaskOkprojecttasks(boil.GetDB(), mods...)
}

// TaskOkprojecttasks retrieves all the okprojecttask's okprojecttask with an executor via task_id column.
func (o *Oktask) TaskOkprojecttasks(exec boil.Executor, mods ...qm.QueryMod) okprojecttaskQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`task_id`=?", o.IDTask),
	)

	query := Okprojecttasks(exec, queryMods...)
	queries.SetFrom(query.Query, "`okprojecttask` as `a`")
	return query
}

// LoadTaskOkprojecttasks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (oktaskL) LoadTaskOkprojecttasks(e boil.Executor, singular bool, maybeOktask interface{}) error {
	var slice []*Oktask
	var object *Oktask

	count := 1
	if singular {
		object = maybeOktask.(*Oktask)
	} else {
		slice = *maybeOktask.(*OktaskSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &oktaskR{}
		}
		args[0] = object.IDTask
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &oktaskR{}
			}
			args[i] = obj.IDTask
		}
	}

	query := fmt.Sprintf(
		"select * from `okprojecttask` where `task_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load okprojecttask")
	}
	defer results.Close()

	var resultSlice []*Okprojecttask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice okprojecttask")
	}

	if len(okprojecttaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TaskOkprojecttasks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.IDTask == foreign.TaskID {
				local.R.TaskOkprojecttasks = append(local.R.TaskOkprojecttasks, foreign)
				break
			}
		}
	}

	return nil
}

// AddTaskOkprojecttasksG adds the given related objects to the existing relationships
// of the oktask, optionally inserting them as new records.
// Appends related to o.R.TaskOkprojecttasks.
// Sets related.R.Task appropriately.
// Uses the global database handle.
func (o *Oktask) AddTaskOkprojecttasksG(insert bool, related ...*Okprojecttask) error {
	return o.AddTaskOkprojecttasks(boil.GetDB(), insert, related...)
}

// AddTaskOkprojecttasksP adds the given related objects to the existing relationships
// of the oktask, optionally inserting them as new records.
// Appends related to o.R.TaskOkprojecttasks.
// Sets related.R.Task appropriately.
// Panics on error.
func (o *Oktask) AddTaskOkprojecttasksP(exec boil.Executor, insert bool, related ...*Okprojecttask) {
	if err := o.AddTaskOkprojecttasks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTaskOkprojecttasksGP adds the given related objects to the existing relationships
// of the oktask, optionally inserting them as new records.
// Appends related to o.R.TaskOkprojecttasks.
// Sets related.R.Task appropriately.
// Uses the global database handle and panics on error.
func (o *Oktask) AddTaskOkprojecttasksGP(insert bool, related ...*Okprojecttask) {
	if err := o.AddTaskOkprojecttasks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTaskOkprojecttasks adds the given related objects to the existing relationships
// of the oktask, optionally inserting them as new records.
// Appends related to o.R.TaskOkprojecttasks.
// Sets related.R.Task appropriately.
func (o *Oktask) AddTaskOkprojecttasks(exec boil.Executor, insert bool, related ...*Okprojecttask) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TaskID = o.IDTask
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `okprojecttask` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"task_id"}),
				strmangle.WhereClause("`", "`", 0, okprojecttaskPrimaryKeyColumns),
			)
			values := []interface{}{o.IDTask, rel.IDPTask}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TaskID = o.IDTask
		}
	}

	if o.R == nil {
		o.R = &oktaskR{
			TaskOkprojecttasks: related,
		}
	} else {
		o.R.TaskOkprojecttasks = append(o.R.TaskOkprojecttasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &okprojecttaskR{
				Task: o,
			}
		} else {
			rel.R.Task = o
		}
	}
	return nil
}

// OktasksG retrieves all records.
func OktasksG(mods ...qm.QueryMod) oktaskQuery {
	return Oktasks(boil.GetDB(), mods...)
}

// Oktasks retrieves all the records using an executor.
func Oktasks(exec boil.Executor, mods ...qm.QueryMod) oktaskQuery {
	mods = append(mods, qm.From("`oktask`"))
	return oktaskQuery{NewQuery(exec, mods...)}
}

// FindOktaskG retrieves a single record by ID.
func FindOktaskG(idTask int, selectCols ...string) (*Oktask, error) {
	return FindOktask(boil.GetDB(), idTask, selectCols...)
}

// FindOktaskGP retrieves a single record by ID, and panics on error.
func FindOktaskGP(idTask int, selectCols ...string) *Oktask {
	retobj, err := FindOktask(boil.GetDB(), idTask, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindOktask retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOktask(exec boil.Executor, idTask int, selectCols ...string) (*Oktask, error) {
	oktaskObj := &Oktask{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `oktask` where `id_task`=?", sel,
	)

	q := queries.Raw(exec, query, idTask)

	err := q.Bind(oktaskObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from oktask")
	}

	return oktaskObj, nil
}

// FindOktaskP retrieves a single record by ID with an executor, and panics on error.
func FindOktaskP(exec boil.Executor, idTask int, selectCols ...string) *Oktask {
	retobj, err := FindOktask(exec, idTask, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Oktask) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Oktask) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Oktask) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Oktask) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no oktask provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oktaskColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	oktaskInsertCacheMut.RLock()
	cache, cached := oktaskInsertCache[key]
	oktaskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			oktaskColumns,
			oktaskColumnsWithDefault,
			oktaskColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(oktaskType, oktaskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oktaskType, oktaskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `oktask` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `oktask` () VALUES ()"
		}

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `oktask` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, oktaskPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into oktask")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.IDTask = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == oktaskMapping["IDTask"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.IDTask,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for oktask")
	}

CacheNoHooks:
	if !cached {
		oktaskInsertCacheMut.Lock()
		oktaskInsertCache[key] = cache
		oktaskInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Oktask record. See Update for
// whitelist behavior description.
func (o *Oktask) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Oktask record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Oktask) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Oktask, and panics on error.
// See Update for whitelist behavior description.
func (o *Oktask) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Oktask.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Oktask) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	oktaskUpdateCacheMut.RLock()
	cache, cached := oktaskUpdateCache[key]
	oktaskUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(oktaskColumns, oktaskPrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update oktask, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `oktask` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, oktaskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oktaskType, oktaskMapping, append(wl, oktaskPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update oktask row")
	}

	if !cached {
		oktaskUpdateCacheMut.Lock()
		oktaskUpdateCache[key] = cache
		oktaskUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q oktaskQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q oktaskQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for oktask")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OktaskSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o OktaskSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o OktaskSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OktaskSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oktaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `oktask` SET %s WHERE (`id_task`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(oktaskPrimaryKeyColumns), len(colNames)+1, len(oktaskPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in oktask slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Oktask) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Oktask) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Oktask) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Oktask) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no oktask provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oktaskColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oktaskUpsertCacheMut.RLock()
	cache, cached := oktaskUpsertCache[key]
	oktaskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			oktaskColumns,
			oktaskColumnsWithDefault,
			oktaskColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			oktaskColumns,
			oktaskPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert oktask, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "oktask", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `oktask` WHERE `id_task`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(oktaskType, oktaskMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oktaskType, oktaskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for oktask")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.IDTask = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == oktaskMapping["IDTask"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.IDTask,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for oktask")
	}

CacheNoHooks:
	if !cached {
		oktaskUpsertCacheMut.Lock()
		oktaskUpsertCache[key] = cache
		oktaskUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Oktask record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Oktask) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Oktask record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Oktask) DeleteG() error {
	if o == nil {
		return errors.New("models: no Oktask provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Oktask record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Oktask) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Oktask record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Oktask) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Oktask provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oktaskPrimaryKeyMapping)
	sql := "DELETE FROM `oktask` WHERE `id_task`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from oktask")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q oktaskQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q oktaskQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no oktaskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from oktask")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o OktaskSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o OktaskSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Oktask slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o OktaskSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OktaskSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Oktask slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(oktaskBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oktaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `oktask` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, oktaskPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(oktaskPrimaryKeyColumns), 1, len(oktaskPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from oktask slice")
	}

	if len(oktaskAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Oktask) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Oktask) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Oktask) ReloadG() error {
	if o == nil {
		return errors.New("models: no Oktask provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Oktask) Reload(exec boil.Executor) error {
	ret, err := FindOktask(exec, o.IDTask)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OktaskSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OktaskSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OktaskSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty OktaskSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OktaskSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	oktasks := OktaskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oktaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `oktask`.* FROM `oktask` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, oktaskPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(oktaskPrimaryKeyColumns), 1, len(oktaskPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&oktasks)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OktaskSlice")
	}

	*o = oktasks

	return nil
}

// OktaskExists checks if the Oktask row exists.
func OktaskExists(exec boil.Executor, idTask int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `oktask` where `id_task`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, idTask)
	}

	row := exec.QueryRow(sql, idTask)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if oktask exists")
	}

	return exists, nil
}

// OktaskExistsG checks if the Oktask row exists.
func OktaskExistsG(idTask int) (bool, error) {
	return OktaskExists(boil.GetDB(), idTask)
}

// OktaskExistsGP checks if the Oktask row exists. Panics on error.
func OktaskExistsGP(idTask int) bool {
	e, err := OktaskExists(boil.GetDB(), idTask)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// OktaskExistsP checks if the Oktask row exists. Panics on error.
func OktaskExistsP(exec boil.Executor, idTask int) bool {
	e, err := OktaskExists(exec, idTask)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
